[credential]
  helper = store

[core]
	pager = diff-so-fancy | less --tabs=2 -RFX
  excludesfile = ~/.gitignoreglobal
  ignorecase = true

[include]
    path = ~/.gitconfig.private

#[url "git@github.com:"]
#  insteadOf = https://github.com/

# Alises
[alias]
  init-safe-commit = !~/.safe-commit-hook/install-for-project.sh
  quick-stats = ! /usr/local/bin/git-quick-stats
  prune = fetch --prune
  undo = reset --soft HEAD^
  glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  logline = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  tree = log --graph --decorate --pretty=oneline --abbrev-commit
  squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-A new start}\");};f"
  #squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-Make Actions Great Again}\");};f"
  scrub = reset --hard @{upstream}
  recentb = "!r() { refbranch=$1 count=$2; git for-each-ref --sort=-committerdate refs/heads --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=${count:-20} | while read line; do branch=$(echo \"$line\" | awk 'BEGIN { FS = \"|\" }; { print $1 }' | tr -d '*'); ahead=$(git rev-list --count \"${refbranch:-origin/master}..${branch}\"); behind=$(git rev-list --count \"${branch}..${refbranch:-origin/master}\"); colorline=$(echo \"$line\" | sed 's/^[^|]*|//'); echo \"$ahead|$behind|$colorline\" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1' ; done | ( echo \"ahead|behind||branch|lastcommit|message|author\\n\" && cat) | column -ts'|';}; r"
  runs = "!f() { \
      watch_gha_runs \
          \"$(git remote get-url origin)\" \
          \"$(git rev-parse --abbrev-ref HEAD)\"; \
    }; f"

# *********************
# Rebase workflow
  mainbranch = "!git remote show origin | sed -n '/HEAD branch/s/.*: //p'"
  synced = "!git pull origin $(git mainbranch) --rebase"
  update = "!git pull origin $(git rev-parse --abbrev-ref HEAD) --rebase"
  squash = "!git rebase -v -i $(git mainbranch)"
  publish = push origin HEAD --force-with-lease
  pub = publish
  ammend = commit --amend
  amend = commit --amend
	fpush = push
# *********************

## Behaviour
[init]
  defaultBranch = main
[push]
  default = current
  autoSetupRemote = true
[pull]
  #rebase = false
  rebase = true

[rebase]
  autosquash = true
[diff]
  colorMoved = default
	submodule = log
	algorithm = histogram
	tool = difftastic
[difftool]
  prompt = false
[merge]
	conflictstyle = zdiff3
  tool = delta
[mergetool]
  prompt = false
[branch]
  autoSetupMerge = true
	sort = -committerdate

[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process

[tar "tar.xz"]
  command = xz -c

# Delta diff-tool
[delta]
  side-by-side = false
  navigate = true
  features = decorations
  features = unobtrusive-line-numbers
  syntax-theme = Dracula

[delta "interactive"]
  diffFilter = delta --color-only --dark --features=interactive
  keep-plus-minus-markers = false

[delta "decorations"]
  commit-decoration-style = blue ol
  commit-style = raw
  file-style = omit
  hunk-header-decoration-style = blue box
  hunk-header-file-style = red
  hunk-header-line-number-style = "#067a00"
  hunk-header-style = file line-number syntax

[delta "unobtrusive-line-numbers"]
  line-numbers = true
  line-numbers-minus-style = "#444444"
  line-numbers-zero-style = "#444444"
  line-numbers-plus-style = "#444444"
  line-numbers-left-format = "{nm:>4}┊"
  line-numbers-right-format = "{np:>4}│"
  line-numbers-left-style = blue
  line-numbers-right-style = blue

[safe]
	directory = /github/workspace
[interactive]
	diffFilter = diff-so-fancy --patch
[diff-so-fancy]
	changeHunkIndicators = true
[status]
	submodulesummary = 1
[rerere] # Reuse Recorded Resolution
	enable = true
	enabled = true
	autoUpdate = true
[help]
	autocorrect = 1
[fetch]
	prunetags = true
[log]
	date = iso


# [maintenance] # Included in my private gitconfig, below is an example
# 	repo = /path/to/git/repos/dotfiles/shell_config # Example
