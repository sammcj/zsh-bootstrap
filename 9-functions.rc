#!/usr/bin/env zsh
#shellcheck disable=SC2148

function mkcd {
  dir="$*"
  mkdir -p "$dir" && cd "$dir" || exit
}

# change /dev/null to youtube-dl-"$(date +%Y%m%d-%H%M%S)".log if you want logging

# Outputs current branch info in prompt format
function git_prompt_info() {
  local ref
  if [[ "$(command git config --get oh-my-zsh.hide-status 2>/dev/null)" != "1" ]]; then
    ref=$(command git symbolic-ref HEAD 2>/dev/null) ||
      ref=$(command git rev-parse --short HEAD 2>/dev/null) || return 0
    echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_SUFFIX"
  fi
}

# wrapper for adding advanced git cli customisation
alias git='git_wrapper'
git_wrapper() {
  # If invoked by another function, alias or xargs, interpret it as normal
  if [[ -n ${FUNCNAME[*]} ]] || [[ -n $ALIASES ]] || [[ -n $XARGS ]]; then
    command git "$@"
    return
  fi
  # clone with depth=1 if no depth is not specified
  if [[ $1 == "clone" ]] && [[ $* != *"--depth"* ]]; then
    shift
    command git clone --depth=1 "$@"
  else
    command git "$@"
  fi
}

function gco() {
  if [[ -n $1 ]]; then
    if [[ $1 == "-b" ]]; then
      # shift to remove -b from args
      shift 1
    fi
    # check to see if the branch exists, if it doesn't offer to create it and check it out otherwise just check it out
    if git branch -a | grep -q "$1"; then
      git checkout "$1"
    else
      echo "Creating branch $1"
      git checkout -b "$1"
    fi
  else
    git branch --sort=-committerdate | fzf --header 'Checkout Recent Branch' --preview 'git diff --color=always {1}' --pointer='>' | xargs git checkout
  fi
}

function gbd() {
  if [[ -n $* ]]; then
    git branch -d "$@"
  else
    git branch --sort=-committerdate | fzf --header 'Delete Git Branch' --preview 'git diff --color=always {1}' --pointer='>' | xargs git branch -d
  fi
}

function checkout-hotfix() {
  HOTFIX_BRANCH="Hotfix-$(date +%Y-%m-%d)-${USER}"
  # If the hotfix branch already exists, append the current time to the branch name
  if git branch -a | grep -q "remotes/origin/$HOTFIX_BRANCH"; then
    HOTFIX_BRANCH="${HOTFIX_BRANCH}-$(date +%H-%M-%S)"
  fi
  git checkout -b "${HOTFIX_BRANCH}"
}

function checkout-hotfix() {
  local PREFIX="hotfix-${USER}"
  local DATESTAMP=$(date +%Y-%m-%d)
  # If the hotfix branch already exists, append a number to the branch name, if the number already exists increment it
  if git branch -a | grep -q "$PREFIX-$DATESTAMP"; then
    local COUNT=1
    while git branch -a | grep -q "$PREFIX-$DATESTAMP-$COUNT"; do
      COUNT=$((COUNT + 1))
    done
    git checkout -b "${PREFIX}-${DATESTAMP}-${COUNT}"
  else
    git checkout -b "${PREFIX}-${DATESTAMP}"
  fi
}

commit-hotfix() {
  local DATESTAMP=$(date +%Y/%m/%d)
  local GIT_ARGS=""
  local MESSAGE="$*" # Set the commit message to the arguments passed to the function
  if [[ $1 == "-n" ]]; then
    GIT_ARGS="-n"    # Add -n as a parameter to git if it's passed as an argument to the function
    MESSAGE="${*:2}" # Remove the first argument from the list of arguments
  fi

  # Check for any files not added - if there are any, list them and ask the user if they want to add them
  local untracked_files="$(git status --porcelain | grep -E '^\?\?' | awk '{print $2}')"
  if [[ -n $untracked_files ]]; then
    echo "There are untracked files in this directory:"
    echo "$untracked_files"
    echo "Would you like to add them? (y/n)"
    read -r ADD_FILES
    if [[ $ADD_FILES == "y" ]]; then
      git add $untracked_files
    fi
  fi

  git commit $GIT_ARGS -m "Hotfix-${DATESTAMP} -- ${MESSAGE}"
}

function checkout-jira() {
  JIRA_BRANCH="IF-${1}-${USER}-$(date +%Y-%m-%d)"
  # If the JIRA branch already exists, append the current time to the branch name
  if git branch -a | grep -q "remotes/origin/$JIRA_BRANCH"; then
    JIRA_BRANCH="${JIRA_BRANCH}-$(date +%H-%M-%S)"
  fi
  git checkout -b "${JIRA_BRANCH}"
}

function commit-jira() {
  local GIT_ARGS=""
  local MESSAGE="$*" # Set the commit message to the arguments passed to the function
  if [[ -n $* ]]; then
    GIT_ARGS="-n" # Add -n as a parameter to git if it's passed as an argument to the function
    shift 1
  fi

  # Check for any files not added - if there are any, list them and ask the user if they want to add them
  local untracked_files="$(git status --porcelain | grep -E '^\?\?' | awk '{print $2}')"
  if [[ -n $untracked_files ]]; then
    echo "There are untracked files in this directory:"
    echo "$untracked_files"
    echo "Would you like to add them? (y/n)"
    read -r ADD_FILES
    if [[ $ADD_FILES == "y" ]]; then
      git add $untracked_files
    fi
  fi

  git add .
  git commit $GIT_ARGS -m "$(git rev-parse --abbrev-ref HEAD | cut -d'-' -f1 -f2) -- ${MESSAGE}"
}

# Outputs the name of the current branch
# Usage example: git pull origin "$(git_current_branch)"
# Using '--quiet' with 'symbolic-ref' will not cause a fatal error (128) if
# it's not a symbolic ref, but in a Git repo.
function git_current_branch() {
  local ref
  ref=$(command git symbolic-ref --quiet HEAD 2>/dev/null)
  local ret=$?
  if [[ $ret != 0 ]]; then
    [[ $ret == 128 ]] && return # no git repo.
    ref=$(command git rev-parse --short HEAD 2>/dev/null) || return
  fi
  echo "${ref#refs/heads/}"
}

function pr-checkout() {
  local jq_template pr_number

  jq_template='"''#\(.number) - \(.title)''\t''Author: \(.user.login)\n''Created: \(.created_at)\n''Updated: \(.updated_at)\n\n''\(.body)''"'

  pr_number=$(
    gh api 'repos/:owner/:repo/pulls' |
      jq ".[] | $jq_template" |
      sed -e 's/"\(.*\)"/\1/' -e 's/\\t/\t/' |
      fzf \
        --with-nth=1 \
        --delimiter='\t' \
        --preview='echo -e {2}' \
        --preview-window=top:wrap |
      sed 's/^#\([0-9]\+\).*/\1/'
  )

  if [ -n "$pr_number" ]; then
    gh pr checkout "$pr_number"
  fi
}

function git_add_global_prepush_hook() {
  local repo_path=$1
  local branch_name=$2
  local hooks_path="$repo_path/.git/hooks"

  # Check if the repo_path is a Git repository
  if [ ! -d "$repo_path/.git" ]; then
    echo "$repo_path is not a Git repository"
    return 1
  fi

  # Create the pre-push hook if it doesn't exist
  if [ ! -f "$hooks_path/pre-push" ]; then
    touch "$hooks_path/pre-push"
    chmod +x "$hooks_path/pre-push"
  fi

  # Add the code to the pre-push hook
  cat <<EOF >>"$hooks_path/pre-push"
#!/usr/bin/env bash

# This script can be run as a pre-push hook locally on repositories to add messages / ensure we're not pushing to the wrong branch etc...

branch_name=$(git symbolic-ref --short HEAD)
if [ "$branch_name" == "main" ] || [ "$branch_name" == "master" ]; then
  echo "WARNING: You are pushing to the $branch_name branch!"
  read -r -p "Are you sure you want to push to $branch_name? [y/N] " response
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo "$response - Pushing to $branch_name"
  else
    echo "Aborting push"
    exit 1
  fi
fi
EOF

  echo "Global pre-push hook added to $repo_path"
}

# Gets the number of commits ahead from remote
function git_commits_ahead() {
  if command git rev-parse --git-dir &>/dev/null; then
    local commits
    commits="$(git rev-list --count @{upstream}..HEAD)"
    if [[ "$commits" != 0 ]]; then
      echo "$ZSH_THEME_GIT_COMMITS_AHEAD_PREFIX$commits$ZSH_THEME_GIT_COMMITS_AHEAD_SUFFIX"
    fi
  fi
}

# Gets the number of commits behind remote
function git_commits_behind() {
  if command git rev-parse --git-dir &>/dev/null; then
    local commits
    commits="$(git rev-list --count HEAD..@{upstream})"
    if [[ "$commits" != 0 ]]; then
      echo "$ZSH_THEME_GIT_COMMITS_BEHIND_PREFIX$commits$ZSH_THEME_GIT_COMMITS_BEHIND_SUFFIX"
    fi
  fi
}

# Outputs if current branch is ahead of remote
function git_prompt_ahead() {
  if [[ -n "$(command git rev-list origin/"$(git_current_branch)"..HEAD 2>/dev/null)" ]]; then
    echo "$ZSH_THEME_GIT_PROMPT_AHEAD"
  fi
}

# Outputs if current branch is behind remote
function git_prompt_behind() {
  if [[ -n "$(command git rev-list HEAD..origin/"$(git_current_branch)" 2>/dev/null)" ]]; then
    echo "$ZSH_THEME_GIT_PROMPT_BEHIND"
  fi
}

# Outputs if current branch exists on remote or not
function git_prompt_remote() {
  if [[ -n "$(command git show-ref origin/"$(git_current_branch)" 2>/dev/null)" ]]; then
    echo "$ZSH_THEME_GIT_PROMPT_REMOTE_EXISTS"
  else
    echo "$ZSH_THEME_GIT_PROMPT_REMOTE_MISSING"
  fi
}

# Formats prompt string for current git commit short SHA
function git_prompt_short_sha() {
  local SHA
  SHA=$(command git rev-parse --short HEAD 2>/dev/null) && echo "$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER"
}

# Formats prompt string for current git commit long SHA
function git_prompt_long_sha() {
  local SHA
  SHA=$(command git rev-parse HEAD 2>/dev/null) && echo "$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER"
}

# Get the status of the working tree
function git_prompt_status() {
  local INDEX STATUS
  INDEX=$(command git status --porcelain -b 2>/dev/null)
  STATUS=""
  if eval "$(echo "$INDEX" | command grep -E '^\?\? ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_UNTRACKED$STATUS"
  fi
  if eval "$(echo "$INDEX" | grep '^A  ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
  elif eval "$(echo "$INDEX" | grep '^M  ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
  fi
  if eval "$(echo "$INDEX" | grep '^ M ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  elif eval "$(echo "$INDEX" | grep '^AM ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  elif eval "$(echo "$INDEX" | grep '^ T ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
  fi
  if eval "$(echo "$INDEX" | grep '^R  ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_RENAMED$STATUS"
  fi
  if eval "$(echo "$INDEX" | grep '^ D ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
  elif eval "$(echo "$INDEX" | grep '^D  ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
  elif eval "$(echo "$INDEX" | grep '^AD ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
  fi
  if eval "$(command git rev-parse --verify refs/stash >/dev/null 2>&1)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_STASHED$STATUS"
  fi
  if eval "$(echo "$INDEX" | grep '^UU ' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_UNMERGED$STATUS"
  fi
  if eval "$(echo "$INDEX" | grep '^## [^ ]\+ .*ahead' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_AHEAD$STATUS"
  fi
  if eval "$(echo "$INDEX" | grep '^## [^ ]\+ .*behind' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_BEHIND$STATUS"
  fi
  if eval "$(echo "$INDEX" | grep '^## [^ ]\+ .*diverged' &>/dev/null)"; then
    STATUS="$ZSH_THEME_GIT_PROMPT_DIVERGED$STATUS"
  fi
  echo "$STATUS"
}

# #  TODO: replace this with something more standard, this was a temporary workaround for poor performance of the stock oh-my-zsh git plugin
# # Compares the provided version of git to the version installed and on path
# # Outputs -1, 0, or 1 if the installed version is less than, equal to, or
# # greater than the input version, respectively.
# function git_compare_version() {
#   local INPUT_GIT_VERSION INSTALLED_GIT_VERSION
#   # shellcheck disable=SC2206,SC2207,SC2296
#   INPUT_GIT_VERSION=(${(s/./)1})
#   # shellcheck disable=SC2206,SC2207,SC2296
#   INSTALLED_GIT_VERSION=($(command git --version 2>/dev/null))
#   # shellcheck disable=SC2206,SC2207,SC2296
#   INSTALLED_GIT_VERSION=(${(s/./)INSTALLED_GIT_VERSION[3]})

#   for i in {1..3}; do
#     if [[ ${INSTALLED_GIT_VERSION[$i]} -gt ${INPUT_GIT_VERSION[$i]} ]]; then
#       echo 1
#       return 0
#     fi
#     if [[ ${INSTALLED_GIT_VERSION[$i]} -lt ${INPUT_GIT_VERSION[$i]} ]]; then
#       echo -1
#       return 0
#     fi
#   done
#   echo 0
# }

# Outputs the name of the current user
# Usage example: $(git_current_user_name)
function git_current_user_name() {
  command git config user.name 2>/dev/null
}

# Outputs the email of the current user
# Usage example: $(git_current_user_email)
function git_current_user_email() {
  command git config user.email 2>/dev/null
}

# Clean up the namespace slightly by removing the checker function
# unfunction git_compare_version

#source /usr/local/etc/profile.d/autojump.sh

pdfcompress() {
  gs -q -dNOPAUSE -dBATCH -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.3 -dPDFSETTINGS=/screen -dEmbedAllFonts=true -dSubsetFonts=true -dColorImageDownsampleType=/Bicubic -dColorImageResolution=144 -dGrayImageDownsampleType=/Bicubic -dGrayImageResolution=144 -dMonoImageDownsampleType=/Bicubic -dMonoImageResolution=144 -sOutputFile="$1".compressed.pdf "$1"
}

# Usage: mv oldfilename
# If you call mv without the second parameter it will prompt you to edit the filename on command line.
# Original mv is called when it's called with more than one argument.
# It's useful when you want to change just a few letters in a long name.

function mv() {
  if [ "$#" -ne 1 ]; then
    command mv "$@"
    return
  fi
  if [ ! -f "$1" ]; then
    command file "$@"
    return
  fi

  read -ei "$1" newfilename
  mv -v "$1" "$newfilename"
}

_force_rehash() {
  ((CURRENT == 1)) && rehash
  return 1 # Because we didn't really complete anything
}

# This was causing tab complete errors such as zle-line-init:1: command not found
# edit-command-output() {
#   BUFFER=$(eval "$BUFFER")
#   CURSOR=0
# }
# zle -N edit-command-output

__mkdir() { if [[ ! -d $1 ]]; then mkdir -p "$1"; fi; }

tch() {
  for x in "$@"; do
    __mkdir "${x:h}"
  done
  touch "$@"
}

# AWS Azure AD login
function aws-azure-login() {
  command aws-azure-login --no-prompt --profile "$@"
  export AWS_PROFILE=$@
  export AWSCLIPARAMS="--profile=$@"
}

# shellcheck disable=SC2068 disable=SC2046 disable=SC2145
function s2a { eval $($(which saml2aws) script --shell=bash --profile=$@); }

# Github
# Deletes workflow logs from a given repo older than 1 month
# e.g. USER=myuser REPO=myrepo ghac
function ghac() {
  DATE=$(date -v "-1m" +"%Y-%m-%d") gh api "repos/${USER}/${REPO}/actions/runs" --paginate -q '.workflow_runs[] | select (.run_started_at  <= "env.DATE") | (.id)' |
    xargs -n1 -I % gh api "repos/${USER}/${REPO}/actions/runs"/% -X DELETE
}

function github_actions_watcher() {
  # https://github.com/nedbat/watchgha
  TOKEN_BACKUP=$GITHUB_TOKEN
  unset GITHUB_TOKEN
  watch_gha_runs "$@" \
    "$(git remote get-url origin)" \
    "$(git rev-parse --abbrev-ref HEAD)"
  GITHUB_TOKEN=$TOKEN_BACKUP
}

# Git checkout new branch, git add, git commit, git push in all subdirectories matching a pattern
function git_add_commit_push() {
  if [[ -z $1 ]] || [[ -z "$2" ]] || [[ -z "$3" ]]; then
    echo 'You must pass three paramters, branchname, commit message, dir match - e.g. "my-branch" "commit message" ABC*'
  fi
  BRANCHNAME="$1"
  COMMITNAME="$2"
  MATCHDIRS="$3"
  for dir in $MATCHDIRS; do
    (
      cd "$dir" &&
        git checkout -b "$BRANCHNAME" &&
        git add . &&
        git commit -n -m "$COMMITNAME" &&
        git push
    )
  done
}

# Interactive cd using fzf
function fcd() {
  local dir

  while true; do
    # exit with ^D
    dir="$(ls -a1p | grep '/$' | grep -v '^./$' | fzf --height 40% --reverse --no-multi --preview 'pwd' --preview-window=up,1,border-none --no-info)"
    if [[ -z "${dir}" ]]; then
      break
    else
      cd "${dir}" || exit
    fi
  done
}

# list env variables with fzf
list_env() {
  var=$(printenv | cut -d= -f1 | fzf) &&
    echo "$var=$(printenv "$var")" &&
    unset var
}

# Encryption (using age)

# File with generated password
encrypt_file_pw() {
  # Suggest installing age if not installed
  if ! command -v age &>/dev/null; then
    echo "age could not be found. Install it with 'brew install age'"
    return
  else
    age -p "$1" -o "${1}.age"
  fi
}

conda_setup() {
  # >>> conda initialize >>>
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$('/Users/samm/miniconda3/bin/conda' 'shell.zsh' 'hook' 2>/dev/null)"
  if [ $? -eq 0 ]; then
    eval "$__conda_setup"
  else
    if [ -f "/Users/samm/miniconda3/etc/profile.d/conda.sh" ]; then
      . "/Users/samm/miniconda3/etc/profile.d/conda.sh"
    else
      export PATH="/Users/samm/miniconda3/bin:$PATH"
    fi
  fi
  unset __conda_setup
  # <<< conda initialize <<<
}

function update_asdf() {
  asdf update
  asdf plugin-update --all
}

# saml2aws
aad() {
  INPUT_PROFILE=$(echo "$1" | sed -e 's/dosa/kis/g;s/cust/klue/g') # Specific to a project I'm working on.
  local IDPPW=$(keychain_password awsazurepw)                      # requires mfa and keychain authentication
  saml2aws login -a "$INPUT_PROFILE" --skip-prompt --password="$IDPPW" --profile="$INPUT_PROFILE" && export AWS_PROFILE="$INPUT_PROFILE" && export AWSCLIPARAMS="--profile=$INPUT_PROFILE"
  unset IDPPW
  aws --profile "$AWS_PROFILE" sts get-caller-identity
}

function awslogin() {
  if [ -z "${1}" ]; then
    echo "ERROR: account name required, e.g. awslogin data-dev"
  else
    # Check credentials are current, refresh if needed and export into shell
    aws configure list --profile "${1}" && eval $(saml2aws script --profile "${1}")
  fi
}

# Reads a password from keychain and outputs it
# usage: keychain_password <service name to match on> <account>
keychain_password() {
  # Make sure there no screen recording active on before returning the password
  if [[ $(pgrep -i screencapture) ]]; then
    echo "ERROR: macOS screen recording (screencapture process) is active. Please stop it before printing the password."
    return 1
  fi
  security find-generic-password -s "$1" -a "$(whoami)" -w
}

# Prompts for a name and a password and stores it in keychain
keychain_password_prompt() {
  echo "Enter a name for the password:"
  read -r name
  echo "Enter the password:"
  # disable echoing the password
  stty -echo
  read -r password
  security add-generic-password -s "$name" -a "$(whoami)" -w "$password"
}

# A function that checks ssh-add and adds my keys if they're not already added
function ssh-add-keys() {
  if ! ssh-add -l | grep -qe 'ED25519\|RSA'; then
    ssh-add --apple-use-keychain ~/.ssh/id_*.key
  fi
}

clean_string() {
  # Escape special characters in a string such as $, ", ', `, \, and newline.
  # Usage: escape_string "string to escape"
  local string="${1}"
  local escaped_string
  escaped_string=$(printf '%q' "${string}")
  echo "${escaped_string}"
}

docker_login_ghcr() {
  # Dependencies: gh
  set -e

  if [ ! -f ~/.docker/config.json ]; then
    echo '{"credsStore": "desktop","credHelpers": {"docker.pkg.github.com": "gh","ghcr.io": "gh"}}' >~/.docker/config.json
  fi

  cmd="${1}"
  if [ "erase" = "${cmd}" ]; then
    cat - >/dev/null
    exit 0
  fi
  if [ "store" = "${cmd}" ]; then
    cat - >/dev/null
    exit 0
  fi
  if [ "get" != "${cmd}" ]; then
    exit 1
  fi

  host="$(cat -)"
  host="${host#https://}"
  host="${host%/}"
  if [ "${host}" != "ghcr.io" ] && [ "${host}" != "docker.pkg.github.com" ]; then
    exit 1
  fi

  token="$(gh config get -h github.com oauth_token)"
  if [ -z "${token}" ]; then
    exit 1
  fi

  printf '{"Username":"%s", "Secret":"%s"}\n' "$(gh config get -h github.com user)" "${token}"
}

docker_inspect_all() {
  # Get the IDs of all running containers
  local container_ids=($(docker ps -q))

  # Iterate over each container ID
  for container_id in "${container_ids[@]}"; do
    # Run docker inspect command and store the output in a variable
    local inspect_output=$(docker inspect --format='{{json .}}' "$container_id")

    # Extract container name and remove leading '/'
    local container_name=$(jq -r '.Name[1:]' <<<"$inspect_output")

    # Extract container status, creation timestamp, and IP address
    local container_status=$(jq -r '.State.Status' <<<"$inspect_output")
    local created_timestamp=$(jq -r '.Created' <<<"$inspect_output")
    local ip_address=$(jq -r '.NetworkSettings.Networks[].IPAddress' <<<"$inspect_output")

    # Extract forwarded ports
    local ports=$(jq -r '.NetworkSettings.Ports | to_entries[] | .key + " -> " + .value[0].HostPort' <<<"$inspect_output")

    # Display the extracted information
    echo "Container ID: $container_id"
    echo "Container Name: $container_name"
    echo "Container Status: $container_status"
    echo "Created Timestamp: $created_timestamp"
    echo "IP Address: $ip_address"
    echo "Forwarded Ports: $ports"
    echo "-----------------------"
  done
}

# 3D Printing
function cura-backup() {
  # Zip up the latest cura config from the newest number cura config directory (~/Library/Application\ Support/cura/(number.number) (e.g. 4.8)
  # and copy it to the cloud backup folder
  local cura_base_dir="${HOME}/Library/Application Support/cura"
  local destination="${HOME}/Library/Mobile Documents/com~apple~CloudDocs/Backups/3dprinting/cura"
  local latest_version_dir="$(ls -d ${cura_base_dir}/*/ | tail -n1)"

  # zip it up with the date
  local date="$(date +%Y-%m-%d)"
  local zip_file="${destination}/cura-${date}.zip"
  zip -r "${zip_file}" "${latest_version_dir}"
  echo "Created ${zip_file}"
}

# ML / Github Copilot
copilot_what-the-shell() {
  TMPFILE=$(mktemp)
  trap 'rm -f $TMPFILE' EXIT
  if /Users/samm/Library/Caches/fnm_multishells/86793_1677532119189/bin/github-copilot-cli what-the-shell "$@" --shellout $TMPFILE; then
    if [ -e "$TMPFILE" ]; then
      FIXED_CMD=$(cat $TMPFILE)

      eval "$FIXED_CMD"
    else
      echo "Apologies! Extracting command failed"
    fi
  else
    return 1
  fi
}

copilot_git-assist() {
  TMPFILE=$(mktemp)
  trap 'rm -f $TMPFILE' EXIT
  if /Users/samm/Library/Caches/fnm_multishells/86793_1677532119189/bin/github-copilot-cli git-assist "$@" --shellout $TMPFILE; then
    if [ -e "$TMPFILE" ]; then
      FIXED_CMD=$(cat $TMPFILE)

      eval "$FIXED_CMD"
    else
      echo "Apologies! Extracting command failed"
    fi
  else
    return 1
  fi
}

copilot_gh-assist() {
  TMPFILE=$(mktemp)
  trap 'rm -f $TMPFILE' EXIT
  if /Users/samm/Library/Caches/fnm_multishells/86793_1677532119189/bin/github-copilot-cli gh-assist "$@" --shellout $TMPFILE; then
    if [ -e "$TMPFILE" ]; then
      FIXED_CMD=$(cat $TMPFILE)

      eval "$FIXED_CMD"
    else
      echo "Apologies! Extracting command failed"
    fi
  else
    return 1
  fi
}

function ripSearch() {
  # 1. Search for text in files using Ripgrep
  # 2. Interactively narrow down the list using fzf
  # 3. Open the file in vscode

  while getopts n OPTION; do
    case "${OPTION}" in
    n) NEW_WINDOW="--new-window" ;;
    *) echo "ERROR: we only support -n" && exit 1 ;;
    esac
  done
  shift $((OPTIND - 1))

  : "${NEW_WINDOW:=""}"

  # Allow the function to be cancelled with Ctrl-C, but don't exit the shell
  trap 'return 1' INT

  ARGLIST=""
  while IFS=: read -rA SELECTED; do
    if [ "${#SELECTED[@]}" -gt 0 ]; then
      ARGLIST+="--goto ${SELECTED[0]}:${SELECTED[1]} "
    fi
  done < <(
    rg --color=always --line-number --no-heading --smart-case "${*:-}" |
      fzf --ansi \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --delimiter : \
        --multi \
        --preview 'bat --color=always {1} --highlight-line {2} --style=header,grid {}' \
        --preview-window 'right,60%,border-bottom,+{2}+3/3,~3'
  )
  if [ -n "${ARGLIST}" ]; then
    code "${NEW_WINDOW}" "${ARGLIST}"
  fi
}

### CAPTURE AND RETURN OUTPUT OF A COMMAND ###
# Usage:
# $ find . -name 'filename' | cap
# /path/to/filename
# $ ret
# /path/to/filename

# capture the output of a command so it can be retrieved with ret
cap() { tee /tmp/capture.out; }

# return the output of the most recent command that was captured by cap
ret() { cat /tmp/capture.out; }
### END CAPTURE AND RETURN OUTPUT OF A COMMAND ###

# Backup VSCode extensions settings
function backup-vscode() {
  local date
  date="$(date +%Y-%m-%d)"
  local destination="${HOME}/Library/Mobile Documents/com~apple~CloudDocs/Backups/vscode/${date}"
  local extensions_file="${destination}/extensions.txt"
  local settings_file="${destination}/settings.json"
  local keybindings_file="${destination}/keybindings.json"

  mkdir -p "${destination}"

  # List extensions
  code --list-extensions >"${extensions_file}"
  echo "Created ${extensions_file}"

  # Backup settings
  cp "${HOME}/Library/Application Support/Code/User/settings.json" "${settings_file}"
  echo "Created:"
  echo "$settings_file"

  # Backup keybindings
  cp "${HOME}/Library/Application Support/Code/User/keybindings.json" "${keybindings_file}"
  echo "$keybindings_file"
}

### Github Functions ###
function gh() {
  # unset GITHUB_TOKEN for gh cli
  GITHUB_TOKEN="" command gh "$@"
}

function gh_pr_list_open() {
  local search_param=""
  local other_params=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
    --match)
      search_param="$2"
      shift 2
      ;;
    *)
      other_params+=("$1")
      shift
      ;;
    esac
  done

  if [[ -n "$search_param" ]]; then
    other_params+=("--search=\"$search_param\"")
  fi

  gh pr list --state open "${other_params[@]}"
}

function gh_pr_list_open_dir_repos() {
  local search_param=""
  local other_params=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
    --match)
      search_param="$2"
      shift 2
      ;;
    *)
      other_params+=("$1")
      shift
      ;;
    esac
  done

  for repo in */; do
    if [[ -d "$repo" ]]; then
      repo_name=$(basename "$repo")
      repo_owner=$(basename "$(dirname "$repo")")
      echo "Repository: $repo_owner/$repo_name"

      gh_pr_list_open --repo "$repo_owner/$repo_name" --match "$search_param" "${other_params[@]}"

      echo ""
    fi
  done
}

function gh_pr_merge_matching() {
  local search_param="$1"
  local other_params=()

  while [[ $# -gt 0 ]]; do
    case "$1" in
    --match)
      search_param="$2"
      shift 2
      ;;
    *)
      other_params+=("$1")
      shift
      ;;
    esac
  done

  local pr_numbers=()
  gh_pr_list_open --match "$search_param" "${other_params[@]}" | while IFS= read -r pr_info; do
    pr_number=$(echo "$pr_info" | jq -r '.number')
    pr_numbers+=("$pr_number")
    echo "PR #$pr_number: $(echo "$pr_info" | jq -r '.title')"
  done

  if [[ ${#pr_numbers[@]} -eq 0 ]]; then
    echo "No matching PRs found."
    return 1
  fi

  read -p "Merge and resolve these PRs? (y/n): " choice
  if [[ $choice == [yY] ]]; then
    for pr_number in "${pr_numbers[@]}"; do
      gh pr merge "$pr_number" --auto "${other_params[@]}"
    done
  fi
}

### END Github Functions ###
